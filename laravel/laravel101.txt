LARAVEL
@@@@@@@@@@@@@@@@@@@@@
Setup & Environment
@@@@@@@@@@@@@@@@@@@@@
-pastikan ada XAMPP dan aktfkan apache dan sql
-pastikan ada Composer (kayak npm untuk laravel)
-command: cd xampp/htdocs, lalu composer create-project laravel/laravel (nama app)
-command: cd (nama app)
-akses manual struktur di localhost/lsapp, untuk frontendnya di localhost/(nama app)/public

buat virtual host:
- buka folder: c->xampp->apache->conf->extra
- buka sebagai admin file 'httpd-vhosts.conf'
- tambahkan dua entry berikut:
	<VirtualHost *:80>
		DocumentRoot "C:/ .....  /xampp/htdocs"
		ServerName localhost
 	</VirtualHost>
 	<VirtualHost *:80>
		DocumentRoot "C:/ .....  /(nama app)/public"
		ServerName (nama app).dev
 	</VirtualHost>
- kemudian buka file (secara administrator) c:->windows->system32->drivers->etc, buka file hosts dan tambahkan:
	127.0.0.1 localhost
	127.0.0.1 (nama app).dev
- restart apache, akses webnya di browser dengan url: (nama app).dev
@@@@@@@@@@@@@@@@@@@@@
Routing & Controllers
@@@@@@@@@@@@@@@@@@@@@
cek list route: php artisan route:list

->routes->web.php
//bisa get post delete
--
Route::get('/', function () {
    return view('welcome');
});

Route::get('/hello', function () {
    return 'hello laravel'; //bisa pass innerhtml juga disini
});
--
//misal pada ->resources->views->pages-> bikin file baru dgn nama about.blade.php, isi "about"
--
Route::get('/about',function(){
    return view ('pages.about'); //bisa juga pages/about
});
--

//dynamic routing
--
Route::get('/users/{id}/{name}',function($id, $name){
    return 'user id is  '.$id.' and the name is '.$name;
}); //run di http://localhost/lsapp/public/users/id/name
--
/*basic idea:
route->controller->return the view.
buat controller dengan langkah mengetik pada terminal:
--
    php artisan make:controller PagesController
--
dan cek filenya pada app->Http->Controllers.

misal kita buka file yg tadi dan tambahkan method pada class sehingga file PagesController.php sbb
--
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class PagesController extends Controller
{
    //
    public function index(){
        return view('pages.index');
    }

  public function about(){
        return view('pages.about');
    }
}
--
//nanti si controller yang harus mengembalikan view, maka return viewnya disana.
buat file baru di resources.views.pages dengan nama index.blade.php (view yg di return fungsi diatas)
buat route sbb
--
Route::get('/pages-controllers','PagesController@index');
Route::get('/about','PagesController@about');
--

dan akses melalui 
http://localhost/lsapp/public/pages-controllers -->index page 
http://localhost/lsapp/public/about		-->about page

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Templating & Compiling Assets
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

//Membuat layout:
-bikin folder dengan nama 'layouts'di view, buat file layout contoh: 'app.blade.php'
-misal pada app hanya body yang berubah, maka bodynya kita hapus dan ganti dengan '@yield('content')
jadinya kayak gini: 
<body>
	@yield('content')
</body>
-lanjut, pindah ke file page misal index.blade.php dan ubah menjadi seperti ini:
@extends('layouts.app') -->extend ke layout yg kita bikin pada folder 'layouts'dengan nama file 'app'
@section('content')
<H1>Hello Wrold</H1>
<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Amet, ut.</p>
@endsection

//Passing Value pada Blade Template: {{$blablabla}}
-bermain di page controllers
-contoh:

    public function about(){
        $data = array(
            'title'=>'about',
            'abouts'=>['WebDev','Prog','SEO']
        );

        return view('pages.about')->with($data);
    }
-pada about.blade.php:

	@extends('layouts.app')
	@section('content')
	<H1>{{$title}}</H1>
    	    @if (count($abouts)>0)
      	      <ul>
        	  @foreach ($abouts as $about)
                	<li>{{$about}}</li>
          	  @endforeach
              </ul>
            @endif
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Amet, ut.</p>
@endsection

//Assets & CSS
pada template layout tambahkan file css dengan (letak folder css="public->css")
bootstrap default laravel:
<link rel="stylesheet" href="{{asset('css/app.css')}}">

-install npm untuk node module bootstrap
-ganti2 warna pada resources-> assets-> sass -> _variables.scss (harus compile ulang)
solusi: npm run watch untuk autocompile ketika ada yg berubah
-custom stylesheet buat file dgn misal nama _custom.scss pada resources-> assets-> sass
-include custom stylesheet pada app.scss setelah Bootstrap (@import "custom";) (tanpa underscore karna underscore=include)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Models & Database Migration
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//model
<?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class modelPost extends Model
{
    //Table Name
    protected $table ='model_posts';

    //Primary Key
    public $primaryKey = 'id';

    //Timestamps
    public $timestamps = true;
}
	

//database
-buat controller dengan mengetik pada terminal: php artisan make:controller PostController --resource
(*bakal dibikin di app->http->controllers)
-buat model dengan mengetik pada terminal: php artisan make:model modelPost -m
(*bakal muncul di app->http). dengan perintah -m akan dibuat migration pada folder database->migrations->nama model+table
-buka file migrationnya dan untuk menambah item yg akan ditambah ke database tambahkan pada fungsi up:
  public function up()
    {
        Schema::create('model_posts', function (Blueprint $table) {
            $table->increments('id');
            $table->timestamps();
	    //tambahan
	    $table->string('title');
	    $table->mediumText('body');
        });
    }
-daftarkan database kita pada .env (DB_DATABASE=namadatabase, DB_USERNAME, DB_PASSWORD)
-kalo ada issue kepanjangan input database cek di app->providers-> AppServiceProviders.php; tambahkan  
	use Illuminate\Support\Facades\Schema;
 dan pada boot tambahkan
	Schema::defaultStringLength(191);
-migrate database ke mysql servel (phpmyadmin kalo pake xampp) dengan command: php artisan migrate

//Tinker
-akses database dari terminal dengan Tinker: php artisan tinker
contoh command lain: >>> App\modelPost::count() ->return number of post
-tambah data dengan tinker
PER DATA ketik:
>>> $post = new App\modelPost();
>>> $post->title='Title via Tinker';
>>> $post->body='body via tinker';
>>> $post->save();

keluar dari tinker: >>>quit


fungsi yg perlu ditambah pada PostController:
1.index: list dari seluruh post
2.create: representasi form
3.store: fungsi untuk submit model ke database
4.edit: edit form
5.update: update
6.destroy: delete
7.show: show single post

fungsi2 tersebut harus diroutekan, buka routes->web.php dan tambahkan route:
	Route::resource('posts','PostController');
(langsung menambahkan route untuk seluruh fungsi pada PostController)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Fetching data with Eloquent
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

lanjutan sebelumnya:
pada PostController.php gunakan use App\modelPost; (biar class modelnya bisa dipake)

//fungsi index
    public function index()
    {
	  $posts = modelPost::all(); //ini fungsi transfer seluruh data dari model modelPost dalam json
	//modelPost::orderBy('title','asc')->get(); data terurut 
	//modelPost::orderBy('title','asc')->take(5)->get(); data terurut, show 5 data saja
        //modelPost::where('title','Title via Tinker')->get(); data spesifik
        return view('posts.index')->with('posts',$posts); //load view dan passing data $posts
    }
-lanjut bikin folder posts dengan file nama index.blade.php pada views (resources->views->posts->index.blade.php) ini file untuk interface route /posts
-pada file blade untuk tampilin data:
@extends('layouts.app')
@section('content')
    <div class="container">
        <h1> posts </h1>
        @if(count($posts)>0)
            @foreach($posts as $post)
                <div class="well">
                    <h3>{{$post->title}}</h3>
                </div>
            @endforeach
        @else
            <p>no post found!</p>
        @endif
    </div>
@endsection

-gimana kalo mau pake page? pada fungsi index jadikan seperti ini:

        $posts = moodelPost::orderBy('title','asc')->paginate(jumlahperpage) 
 	return view('posts.index')->with('posts',$posts);
 dan pada layout tambahkan '{{$posts->links()}}' dibawah @endforeach. otomatis nambah link  page 1,2,dst


//fungsi show: kalo di android ini yg memegang per-satuan dari recyclelist
-pada "cardviewnya" di index.blade.php milik post kita bikin seperti ini:
	<h3><a href="/lsapp/public/posts/{{$post->id}}">{{$post->title}}</a></h3>
 sehingga akan mengalihkan ke /posts/{{$post->id}} ketika dipencet
-cek apakah benar return valuenya pada PostController fungsi show
    public function show($id)
    {
        //
        return modelPost::find($id);
    }
-pass data ke viewnya dengan 
    public function show($id)
    {
        //
       // return modelPost::find($id); //cek data ke id
       $post = modelPost::find($id);
       return view('posts.show')->with('post',$post);
    }
-pada show.blade.php:
@extends('layouts.app')

@section('content')
    <a href="/lsapp/public/posts" class="btn">back to posts</a>
    <div class="container">
    <h1>{{$post->title}}</h1>
    <p>{{$post->body}}</p>
    </div>
@endsection

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Fetching data with NON-Eloquent
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
fetch data dengan SQL query, pastikan 'use DB;' pada PostController
 public function index()
    {
        /*dengan SQL queries:
            $posts = DB::select('SELECT * FROM posts');
        */
	 return view('posts.index')->with('posts',$posts); //load view  
    }

@@@@@@@@@@@@@@@@@
Error and Session
@@@@@@@@@@@@@@@@@
-buat file messages.blade.php pada folder views:
@if(count($errors)>0)
@foreach ($errors->all() as $error)
    <div class="alert alert-danger">
        {{$error}}
    </div>
@endforeach
@endif

@if (session('success'))
    <div class="alert alert-success">
        {{session('success')}}
    </div>
@endif

@if (session('error'))
    <div class="alert alert-danger">
        {{session('error')}}
    </div>
@endif

-pada layout app.blade.php, include file messages.blade.php: @include('messages'); (diatas @yield('content');)


@@@@@@@@@@@@@@@@@@@@@@
Forms and Saving Data
@@@@@@@@@@@@@@@@@@@@@@
-bikin button tambah post pada app.blade.php
 <ul class="nav navbar-nav navbar-right">
   <li><a href="/lsapp/public//posts/create">create post</a></li>
 </ul>

//fungsi create:
-pada fungsi create di post controller return view ke 'posts.create' dan buat file templating bladenya dengan nama create.blade.php pada folder resource->views->posts
-buka web laravelcollective->forms &h html
-pada terminal: composer require "laravelcollective/html":"^5.4.0"
-pada folder config file app.php:
Next, add your new provider to the providers array of config/app.php:

  'providers' => [
    // ...
    Collective\Html\HtmlServiceProvider::class,
    // ...
  ],
-Finally, add two class aliases to the aliases array of config/app.php:

  'aliases' => [
    // ...
      'Form' => Collective\Html\FormFacade::class,
      'Html' => Collective\Html\HtmlFacade::class,
    // ...
  ],
-jangan lupa pada terminal ketik: composer require laravelcollective/html
karna kadang blm masuk ke file composer.json (kesalahan terakhir: salah nginstall collective jadi kagak bisa jalan:v)
-lanjut, ke view yg mau kita bikin ada formnya: (create.blade.php)
input berupa title, body, dan submit button
@extends('layouts.app')

@section('content')
    <h1>Create Post</h1>
    {!! Form::open(['action' => 'PostController@store','method' => 'POST']) !!}
        <div class="form-group">
            {{Form::label('title','Title')}}
            {{Form::text('title','',['class' => 'form-control', 'placeholder' => 'Title'])}}
        </div>
        <div class="form-group">
                {{Form::label('body','Body')}}
                {{Form::textarea('body','',['class' => 'form-control', 'placeholder' => 'Body'])}}
        </div>
        {{Form::submit('Submit',['class' => 'btn btn-primary' ])}}
    {!! Form::close() !!}
@endsection
-saat button submit akan request fungsi store...

//fungsi store
  public function store(Request $request)
    {
        //validasi.
        $this->validate($request, [
            'title' => 'required', //misal tidak diisi nanti errornya dihandle include layout messages.
            'body' => 'required'
        ]);

        //create post dengan eloquent
        $post = new modelPost;
        $post->title = $request->input('title');
        $post->body = $request->input('body');
        $post->save();

        //redirect ketika data tervalidasi dan telah dipost ke database
        return redirect('/posts')->with('success','post created!');
    }

//add CKEDITOR via composer biar ga cuma textarea kosongan, tapi ada button2 kayak ngedit blog beneran
link: https://github.com/UniSharp/laravel-ckeditor
-composer require unisharp/laravel-ckeditor
-Add ServiceProvider
 Edit config/app.php, add the following file to Application Service Providers section.
	Unisharp\Ckeditor\ServiceProvider::class,
-Publish the resources
	php artisan vendor:publish --tag=ckeditor
-Default way (initiate by name or id) : ->>ditaro di layout app.blade.php, diatas </body> biar scriptnya jalan

    <script src="/vendor/unisharp/laravel-ckeditor/ckeditor.js"></script>
    <script>
        CKEDITOR.replace( 'article-ckeditor' );
    </script>
Or if you want to initiate by jQuery selector :

    <script src="/vendor/unisharp/laravel-ckeditor/ckeditor.js"></script>
    <script src="/vendor/unisharp/laravel-ckeditor/adapters/jquery.js"></script>
    <script>
        $('textarea').ckeditor();
        // $('.textarea').ckeditor(); // if class is prefered.
    </script>
-lanjut, textarea formnya kasihin id: 'id'=>'article-ckeditor'

@@@@@@@@@@@@@@@@@@@@@
Edit and Delete Data
@@@@@@@@@@@@@@@@@@@@@
Edit dan delete button ada di post saat diklik post per satuannya
//edit data dengan edit function
-pada PostController di fungsi edit:
   public function edit($id)
    {
        //
        $post = modelPost::find($id);
        return view('posts.edit')->with('post',$post);
    }

-kemudian bikin file edit.blade.php pada resource->views->posts, 
@extends('layouts.app')
@section('content')
    <h1>Edit Post</h1>  <!--ini berubah-->
    {!! Form::open(['action' => ['PostController@update', $post->id],'method' => 'POST']) !!} <!--ini berubah-->
        <div class="form-group">
            {{Form::label('title','Title')}}
            {{Form::text('title',$post->title,['class' => 'form-control', 'placeholder' => 'Title'])}}
        </div>
        <div class="form-group">
                {{Form::label('body','Body')}}
                {{Form::textarea('body',$post->body,['id' => 'article-ckeditor','class' => 'form-control', 'placeholder' => 'Body'])}}
        </div>
        {{form::hidden('_method','PUT')}} <!--ini line tambahan. seharusnya harus lewat PUT namun dengan cara ini bisa dengan method POST-->
        {{Form::submit('Submit',['class' => 'btn btn-primary' ])}}
    {!! Form::close() !!}

    <script src="/vendor/unisharp/laravel-ckeditor/ckeditor.js"></script>
    <script>
        CKEDITOR.replace( 'article-ckeditor' );
    </script>
@endsection

-lanjut, pada PostController update function:
isi dari function update bakal sama dengan function store, namun bedanya hanya pada $post=modelPost::position($id);
  
 public function update(Request $request, $id)
    {
        //
         //validasi.
         $this->validate($request, [
            'title' => 'required', //misal tidak diisi nanti errornya dihandle include layout messages.
            'body' => 'required'
        ]);

        //create post dengan eloquent
        $post =  modelPost::find($id);
        $post->title = $request->input('title');
        $post->body = $request->input('body');
        $post->save();

        //redirect ketika data tervalidasi dan telah dipost ke database
        return redirect('/posts')->with('success','post updated!');
    }

//delete data
-pada show.blade.php, kita bikin tombol + spoofing delete requestnya

@extends('layouts.app')

@section('content')
    <a href="/lsapp/public/posts" class="btn">back to posts</a>
    <div class="container">
    <h1>{{$post->title}}</h1>
    <p>{{$post->body}}</p>
    <hr>
    <a href="/lsapp/public/posts/{{$post->id}}/edit" class="btn btn-primary">Edit Post</a>
    </div>

    <!--delete request dibawah ini-->
    {!!Form::open(['action' => ['PostController@destroy',$post->id], 'method'=>'POST'])!!}
        {{Form::hidden('_method','DELETE')}}
        {{Form::submit('Delete',['class'=>'btn btn-danger'])}}
    {!!Form::close()!!}
@endsection

-kemudian pada PostController kita ubah fungsi destroy menjadi seperti berikut:
  public function destroy($id)
    {
        //
        $post = modelPost::find($id);
        $post->delete();
        return redirect('/posts')->with('success','post removed');
    }


@@@@@@@@@@@@@@@@@@@@@
User Authentification
@@@@@@@@@@@@@@@@@@@@@
 	php artisan make:auth, terus yes
-nanti bakal dibikinin layout app baru, jadi sebaiknya kalo mau ada login dll pertama saja biar langsung di templating.
-pindahin button create post ke home.blade.php, kemudian kita command 
 	php artisan make:migration add_user_id_to_posts
 yang nantinya akan digunakan untuk menambah user-id pada post yang dibuat user tertentu.

fungsi up pada file migration add_user_id_to_posts:
 public function up()
    {
        Schema::table('posts', function ($table) {
            //
            $table->integer('user_id');
        });
    }

fungsi down pada file migration add_user_id_to_posts:
 public function down()
    {
        Schema::table('posts', function ($table) {
            //
            $table->dropColumn('user_id');
        });
    }

-migrasikan: php artisan migrate
-fungsi store pada postcontroller kita tambahi user_id, jadinya gini:
 public function store(Request $request)
    {
        //validasi.
        $this->validate($request, [
            'title' => 'required', //misal tidak diisi nanti errornya dihandle include layout messages.
            'body' => 'required'
        ]);

        //create post dengan eloquent
        $post = new modelPost;
        $post->title = $request->input('title');
        $post->body = $request->input('body');
        $post->user_id = auth()->user()->id; //ambil user_id dari user yg sedang aktif
        $post->save();

        //redirect ketika data tervalidasi dan telah dipost ke database
        return redirect('/posts')->with('success','post created!');
    }

@@@@@@@@@@@@@@@@@@@
Model Relationship
@@@@@@@@@@@@@@@@@@@
-pada modelPost.php tambahkan fungsi berikut:
 public function user(){
        return $this->belongsTo('App\User');
    }
-pada User.php tambahkan fungsi berikut:
   public function posts(){
        return $this->hasMany('App\modelPost');
    }
dengan 2 fungsi diatas kita bisa akses berupa:
	{{$post->user->name}} dll

-pada homeController:
use App\modelPost;
use App\User;
public function index()
    {
        $user_id = auth()->user()->id;
        $user = User::find($user_id);
        return view('home')->with('posts',$user->posts);
    }

-pada home.blade.php
 <h3>Your Blog Post</h3>
 <table class="table table-striped">
     <tr>
         <th>Title</th>
         <th></th>
         <th></th>
         <th></th>
     </tr>
     @foreach ($posts as $post)
     <tr>
        <td>{{$post->title}}</td>
        <td>{{$post->user->name}}</td>
        <td><a href="/lsapp/public/posts/{{$post->id}}/edit" class="btn btn-primary">Edit Post</a></td>
        <td>
        <!--delete request dibawah ini-->
    	   {!!Form::open(['action' => ['PostController@destroy',$post->id], 'method'=>'POST'])!!}
    	   {{Form::hidden('_method','DELETE')}}
   	   {{Form::submit('Delete',['class'=>'btn btn-danger'])}}
	   {!!Form::close()!!}
         </td>
     </tr>
     @endforeach
 </table>

@@@@@@@@@@@@@@@
Access Control
@@@@@@@@@@@@@@@
//agar beberapa route tidak bisa diakses(misal ketika tidak login maka tidak bisa create edit delete post)

-pada postcontroller kita buat constructor:
  public function __construct(){
        $this->middleware('auth',['except' => ['index','show']]); //view yg di except
    }

//agar route lain tidak bisa diakses secara ngetik di url bar, pada postcontroller fungsi edit dan delete:
public function edit($id)
    {
        //
        $post = modelPost::find($id);
        //check if user is permitted to edit
        if(auth()->user()->id !== $post->user_id){
            return redirect('posts')->with('error','not authorized');
        }

        return view('posts.edit')->with('post',$post);
    }

//agar menyembunyikan button dari guest / button hanya pada post milik org tertentu maka digunakan templating blade sbb:
   @if(!Auth::guest()) <!--//guest tidak bisa melihat button-->
    @if(!Auth::user()->id == $post->user_id) <!--user cuma bisa liat button di post miliknya-->
    <a href="/lsapp/public/posts/{{$post->id}}/edit" class="btn btn-primary">Edit Post</a>
    </div>

    <!--delete request dibawah ini-->
    {!!Form::open(['action' => ['PostController@destroy',$post->id], 'method'=>'POST'])!!}
        {{Form::hidden('_method','DELETE')}}
        {{Form::submit('Delete',['class'=>'btn btn-danger'])}}
    {!!Form::close()!!}
    @endif
    @endif

@@@@@@@@@@@@@@@
File Uploading
@@@@@@@@@@@@@@@
pada create.blade.php:
-pastikan ada enctype pada form, dan tambahkan form untuk uploadnya
 @extends('layouts.app')

@section('content')
    <h1>Create Post</h1> //liat enctype
    {!! Form::open(['action' => 'PostController@store','method' => 'POST','enctype' => 'multipart/form-data']) !!}
        <div class="form-group">
            {{Form::label('title','Title')}}
            {{Form::text('title','',['class' => 'form-control', 'placeholder' => 'Title'])}}
        </div>
        <div class="form-group">
                {{Form::label('body','Body')}}
                {{Form::textarea('body','',['id' => 'article-ckeditor','class' => 'form-control', 'placeholder' => 'Body'])}}
        </div>
        <div class="form-group"> //ini untuk uplaodingnya
            {{Form::file('cover_image ')}}
        </div>
        {{Form::submit('Submit',['class' => 'btn btn-primary' ])}}
    {!! Form::close() !!}

    <script src="/vendor/unisharp/laravel-ckeditor/ckeditor.js"></script>
    <script>
        CKEDITOR.replace( 'article-ckeditor' );
    </script>
@endsection

kita bikin kolom baru yg memuat file tsb pada tabel post dengan command:
php artisan make:migration add_cover_image_to_posts
-pada file add_cover_image_to_posts pada fungsi up and downnya kita bikin sebagai berikut:
 <?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class AddCoverImageToPosts extends Migration
{
       /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('model_posts', function ($table) {
            //
            $table->string('cover_image');
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('model_posts', function ($table) {
            //
            $table->dropColumn('cover_image');
        });
    }
}

-php artisan migrate

pada function store pada postcontroller:
-validasi imagenya:
  $this->validate($request, [
            'title' => 'required', //misal tidak diisi nanti errornya dihandle include layout messages.
            'body' => 'required',
            'cover_image' => 'image|nullable|max:1999'
        ]);

-upload handler:
//handle file upload
        if($request->hasFile('cover_image')){
            //get filename with extension
            $fileNameWithExtension = $request->file('cover_image')->getClientOriginalName();
            //get just filename
            $fileName = pathinfo($fileNameWithExtension, PATHINFO_FILENAME);
            //get just extension
            $extension = $request->file('cover_image')->getClientOriginalExtension();
            //filename to store
            $FileNameToStore = $fileName.'_'.time().'.'.$extension;
            //upload image
            $path = $request->file('cover_image')->storeAs('public/cover_images',$FileNameToStore);
        }else{
            $FileNameToStore = 'noimage.jpg';
        }

        //create post dengan eloquent
        $post = new modelPost;
        $post->cover_image = $FileNameToStore;
        $post->title = $request->input('title');
        $post->body = $request->input('body');
        $post->user_id = auth()->user()->id; //ambil user_id dari user yg sedang aktif
        $post->save();

        //redirect ketika data tervalidasi dan telah dipost ke database
        return redirect('/posts')->with('success','post created!');


-karna storage\app\public tidak bisa diakses browser, maka kita buat syslink dengan command:
  php artisan storage:link

index.blade.php milik posts (yang display seluruh post pada web) kita bikin keliatan fotonya disitu:
@extends('layouts.app')

@section('content')
    <div class="container">
        <h1> posts </h1>
        @if(count($posts)>0)
            
            @foreach($posts as $post)
            <div class="well">
                <div class="col-md-4 col-sm-4">
                <img src="/lsapp/public/storage/cover_images/{{$post->cover_image}}" style="width:100%">
                </div>
                <div class="col-md-8 col-sm-8">         
                    <h3><a href="/lsapp/public/posts/{{$post->id}}">{{$post->title}}</a></h3>
                <small>written by {{$post->user->name}}, {{$post->created_at}}</small>
                </div>
            </div>              
            @endforeach 
            
        @else
            <p>no post found!</p>
        @endif
    </div>
@endsection

karna pada edit kita juga mau bikin supaya bisa edit gambarnya:
-pada edit bikin form uploadingnya, jangan lupa enctype
-pada postcontroller fungsi update masukan line berikut dibawah validasi:
   //handle file upload
           if($request->hasFile('cover_image')){
            //get filename with extension
            $fileNameWithExtension = $request->file('cover_image')->getClientOriginalName();
            //get just filename
            $fileName = pathinfo($fileNameWithExtension, PATHINFO_FILENAME);
            //get just extension
            $extension = $request->file('cover_image')->getClientOriginalExtension();
            //filename to store
            $FileNameToStore = $fileName.'_'.time().'.'.$extension;
            //upload image
            $path = $request->file('cover_image')->storeAs('public/cover_images',$FileNameToStore);
        }

 berbeda dengan fungsi store yg memiliki else statement, karna kalo gamau update foto bukan berarti fotonya diilangin kan

-fungsi update keseluruhan sbb:
 public function update(Request $request, $id)
    {
        //
         //validasi.
         $this->validate($request, [
            'title' => 'required', //misal tidak diisi nanti errornya dihandle include layout messages.
            'body' => 'required'
        ]);

           //handle file upload
           if($request->hasFile('cover_image')){
            //get filename with extension
            $fileNameWithExtension = $request->file('cover_image')->getClientOriginalName();
            //get just filename
            $fileName = pathinfo($fileNameWithExtension, PATHINFO_FILENAME);
            //get just extension
            $extension = $request->file('cover_image')->getClientOriginalExtension();
            //filename to store
            $FileNameToStore = $fileName.'_'.time().'.'.$extension;
            //upload image
            $path = $request->file('cover_image')->storeAs('public/cover_images',$FileNameToStore);
        }

        //create post dengan eloquent
        $post =  modelPost::find($id);
        $post->title = $request->input('title');
        $post->body = $request->input('body');
        if($request->hasFile('cover_image')){
            $post->cover_image = $FileNameToStore;
        }
        $post->save();

        //redirect ketika data tervalidasi dan telah dipost ke database
        return redirect('/posts')->with('success','post updated!');
    }

sekarang untuk fungsi delete, karna kita mau mendelete foto dari storage ketika si post didelete
-pada post controler use Illuminate\Support\Facades\Storage;
-pada post controller fungsi delete:
public function destroy($id)
    {
        //
        $post = modelPost::find($id);

        if(auth()->user()->id !== $post->user_id){
            return redirect('posts')->with('error','not authorized');
        }

        if($post->cover_image != 'no_image.jpg'){
            Storage::delete('public/cover_images/'.$post->cover_image);
        }
        
        $post->delete();
        return redirect('/posts')->with('success','post removed');
    }

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Deploy Laravel in Shared Hosting
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-create database name, user, password.
-phpmyadmin xampp table kita harus diexport, klik export->go, namai sesuai nama database yg dibikin.sql
-phpmyadmin cpanel pada database baru, import->choose file yg tadi diexport

-bawa file ke remote server (pake filezilla client)
-host: nama web, username: username, password: password (kalo gabisa login bikin FTP accounts di cpanel)
-file nanti bukan di folder public, tapi bikin folder baru. (misal: lsapp).
-yang masuk ke public.html: file local lsapp/public, selainya ke folder baru tadi.

-kita arahkan biar web tau dimana file kita tadi:
-pada public.html edit index.php filenya:
 require __DIR__.'/../lsapp/bootstrap/autoload.php';
 $app = require_once __DIR__.'/../lsapp/bootstrap/app.php';
-save dan upload.

-set database agar benar ke database pada web bukan local lagi
-edit file .env, DB_DATABASE=nama db web, DB_USERNAME=uname db web, DB_PASSWORD= pass db web, dan upload kembali ke webnya.

-sekarang handle symlink / handling upload foto:
-buat file php symlinkcreate.php
<?php
symlink('/home/(cpanelaccname)/lsapp/storage/app/public','/home/cpanelaccname)/public_html/storage');
-upload ke public_html biar bisa di run via browser
-pada urlbar: namaweb.com/symlinkcreate.php -> enter
-kalo udah jalan hapus file symlinkcreatenya

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
catatan:
{!!$variable!!} : digunakan biar si $variabel bisa diparse jika mengandung unsur html (misal bold dll), karena dengan {{$variable}} tag htmlnya ga diparse.