LARAVEL

@@@@@@@@@@@@@@@@@@@@@
Routing & Controllers
@@@@@@@@@@@@@@@@@@@@@
cek list route: php artisan route:list

->routes->web.php
//bisa get post delete
--
Route::get('/', function () {
    return view('welcome');
});

Route::get('/hello', function () {
    return 'hello laravel'; //bisa pass innerhtml juga disini
});
--
//misal pada ->resources->views->pages-> bikin file baru dgn nama about.blade.php, isi "about"
--
Route::get('/about',function(){
    return view ('pages.about'); //bisa juga pages/about
});
--

//dynamic routing
--
Route::get('/users/{id}/{name}',function($id, $name){
    return 'user id is  '.$id.' and the name is '.$name;
}); //run di http://localhost/lsapp/public/users/id/name
--
/*basic idea:
route->controller->return the view.
buat controller dengan langkah mengetik pada terminal:
--
    php artisan make:controller PagesController
--
dan cek filenya pada app->Http->Controllers.

misal kita buka file yg tadi dan tambahkan method pada class sehingga file PagesController.php sbb
--
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class PagesController extends Controller
{
    //
    public function index(){
        return view('pages.index');
    }

  public function about(){
        return view('pages.about');
    }
}
--
//nanti si controller yang harus mengembalikan view, maka return viewnya disana.
buat file baru di resources.views.pages dengan nama index.blade.php (view yg di return fungsi diatas)
buat route sbb
--
Route::get('/pages-controllers','PagesController@index');
Route::get('/about','PagesController@about');
--

dan akses melalui 
http://localhost/lsapp/public/pages-controllers -->index page 
http://localhost/lsapp/public/about		-->about page

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Templating & Compiling Assets
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

//Membuat layout:
-bikin folder dengan nama 'layouts'di view, buat file layout contoh: 'app.blade.php'
-misal pada app hanya body yang berubah, maka bodynya kita hapus dan ganti dengan '@yield('content')
jadinya kayak gini: 
<body>
	@yield('content')
</body>
-lanjut, pindah ke file page misal index.blade.php dan ubah menjadi seperti ini:
@extends('layouts.app') -->extend ke layout yg kita bikin pada folder 'layouts'dengan nama file 'app'
@section('content')
<H1>Hello Wrold</H1>
<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Amet, ut.</p>
@endsection

//Passing Value pada Blade Template: {{$blablabla}}
-bermain di page controllers
-contoh:

    public function about(){
        $data = array(
            'title'=>'about',
            'abouts'=>['WebDev','Prog','SEO']
        );

        return view('pages.about')->with($data);
    }
-pada about.blade.php:

	@extends('layouts.app')
	@section('content')
	<H1>{{$title}}</H1>
    	    @if (count($abouts)>0)
      	      <ul>
        	  @foreach ($abouts as $about)
                	<li>{{$about}}</li>
          	  @endforeach
              </ul>
            @endif
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Amet, ut.</p>
@endsection

//Assets & CSS
pada template layout tambahkan file css dengan (letak folder css="public->css")
bootstrap default laravel:
<link rel="stylesheet" href="{{asset('css/app.css')}}">

-install npm untuk node module bootstrap
-ganti2 warna pada resources-> assets-> sass -> _variables.scss (harus compile ulang)
solusi: npm run watch untuk autocompile ketika ada yg berubah
-custom stylesheet buat file dgn misal nama _custom.scss pada resources-> assets-> sass
-include custom stylesheet pada app.scss setelah Bootstrap (@import "custom";) (tanpa underscore karna underscore=include)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Models & Database Migration
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//model
<?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class modelPost extends Model
{
    //Table Name
    protected $table ='model_posts';

    //Primary Key
    public $primaryKey = 'id';

    //Timestamps
    public $timestamps = true;
}
	

//database
-buat controller dengan mengetik pada terminal: php artisan make:controller PostController --resource
(*bakal dibikin di app->http->controllers)
-buat model dengan mengetik pada terminal: php artisan make:model modelPost -m
(*bakal muncul di app->http). dengan perintah -m akan dibuat migration pada folder database->migrations->nama model+table
-buka file migrationnya dan untuk menambah item yg akan ditambah ke database tambahkan pada fungsi up:
  public function up()
    {
        Schema::create('model_posts', function (Blueprint $table) {
            $table->increments('id');
            $table->timestamps();
	    //tambahan
	    $table->string('title');
	    $table->mediumText('body');
        });
    }
-daftarkan database kita pada .env (DB_DATABASE=namadatabase, DB_USERNAME, DB_PASSWORD)
-kalo ada issue kepanjangan input database cek di app->providers-> AppServiceProviders.php; tambahkan  
	use Illuminate\Support\Facades\Schema;
 dan pada boot tambahkan
	Schema::defaultStringLength(191);
-migrate database ke mysql servel (phpmyadmin kalo pake xampp) dengan command: php artisan migrate

//Tinker
-akses database dari terminal dengan Tinker: php artisan tinker
contoh command lain: >>> App\modelPost::count() ->return number of post
-tambah data dengan tinker
PER DATA ketik:
>>> $post = new App\modelPost();
>>> $post->title='Title via Tinker';
>>> $post->body='body via tinker';
>>> $post->save();

keluar dari tinker: >>>quit


fungsi yg perlu ditambah pada PostController:
1.index: list dari seluruh post
2.create: representasi form
3.store: fungsi untuk submit model ke database
4.edit: edit form
5.update: update
6.destroy: delete
7.show: show single post

fungsi2 tersebut harus diroutekan, buka routes->web.php dan tambahkan route:
	Route::resource('posts','PostController');
(langsung menambahkan route untuk seluruh fungsi pada PostController)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Fetching data with Eloquent
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

lanjutan sebelumnya:
pada PostController.php gunakan use App\modelPost; (biar class modelnya bisa dipake)

//fungsi index
    public function index()
    {
	  $posts = modelPost::all(); //ini fungsi transfer seluruh data dari model modelPost dalam json
	//modelPost::orderBy('title','asc')->get(); data terurut 
        //modelPost::where('title','Title via Tinker')->get(); data spesifik
        return view('posts.index')->with('posts',$posts); //load view dan passing data $posts
    }
-lanjut bikin folder posts dengan file nama index.blade.php pada views (resources->views->posts->index.blade.php) ini file untuk interface route /posts
-pada file blade untuk tampilin data:
@extends('layouts.app')
@section('content')
    <div class="container">
        <h1> posts </h1>
        @if(count($posts)>0)
            @foreach($posts as $post)
                <div class="well">
                    <h3>{{$post->title}}</h3>
                </div>
            @endforeach
        @else
            <p>no post found!</p>
        @endif
    </div>
@endsection

//fungsi show: kalo di android ini yg memegang per-satuan dari recyclelist
-pada "cardviewnya" di index.blade.php milik post kita bikin seperti ini:
	<h3><a href="/lsapp/public/posts/{{$post->id}}">{{$post->title}}</a></h3>
 sehingga akan mengalihkan ke /posts/{{$post->id}} ketika dipencet
-cek apakah benar return valuenya pada PostController fungsi show
    public function show($id)
    {
        //
        return modelPost::find($id);
    }
-pass data ke viewnya dengan 
    public function show($id)
    {
        //
       // return modelPost::find($id); //cek data ke id
       $post = modelPost::find($id);
       return view('posts.show')->with('post',$post);
    }
-pada show.blade.php:
@extends('layouts.app')

@section('content')
    <a href="/lsapp/public/posts" class="btn">back to posts</a>
    <div class="container">
    <h1>{{$post->title}}</h1>
    <p>{{$post->body}}</p>
    </div>
@endsection
